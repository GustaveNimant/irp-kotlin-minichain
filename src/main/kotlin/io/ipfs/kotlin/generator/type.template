package io.ipfs.kotlin

/**
<<<<<<< HEAD
 * What is it : The different Types of {{ELEMENT}} files
 * Definition : An {{ELEMENT}} is a file adressed by its content i.e. its hash or CID on Ipfs.
=======
 * What is it : The different Types of Immutable files
 * Definition : An Immutable is a file adressed by its content i.e. its hash or CID on Ipfs.
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
 * Definition : An {{ELEMENT}}Type is parametrized by the Type of its Hash (MultiHashType)
 * Definition : {{ELEMENT}}Block
 * Definition : {{ELEMENT}}Code
 * Definition : {{ELEMENT}}Friends
 * Definition : {{ELEMENT}}Identity
 * Definition : {{ELEMENT}}Label
 * Definition : {{ELEMENT}}SmartContract
 * Definition : {{ELEMENT}}Symbol
 * Definition : {{ELEMENT}}Tag
 * Definition : {{ELEMENT}}Text
<<<<<<< HEAD
 * Abbreviation : immTyp 
=======
 * Abbreviation : {{ABBREVIATION}}Typ 
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
 * Author : Emile Achadde 23 février 2020 at 09:33:04+01:00
 * Revision : companion by Emile Achadde 28 février 2020 at 15:45:40+01:00
 * Revision : hashOf() by Emile Achadde 01 mars 2020 at 13:03:06+01:00
 */

sealed class {{ELEMENT}}Type () {
<<<<<<< HEAD
    data class {{ELEMENT}}TypeBlock (val multiHash: MultiHashType) : {{ELEMENT}}Type()
=======
    data class {{ELEMENT}}TypeSUB01 (val multiHash: MultiHashType) : {{ELEMENT}}Type()
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
    data class {{ELEMENT}}TypeProgram (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeFriends (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeIdentity (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeLabel (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeSmartContract (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeSymbol (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeTag (val multiHash: MultiHashType) : {{ELEMENT}}Type()
    data class {{ELEMENT}}TypeText (val multiHash: MultiHashType) : {{ELEMENT}}Type()

    fun hashOf (): String {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)

	val mulHas = multiHashOf()
	val result = mulHas.hashOf()

	if(isTrace(here)) println ("$here: output result '$result'")
	
	exiting(here)
	return result
    }

    fun multiHashOf(): MultiHashType {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)

	val result =
	    when (this) {
<<<<<<< HEAD
		is {{ELEMENT}}TypeBlock -> this.multiHash
=======
		is {{ELEMENT}}TypeSUB01 -> this.multiHash
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
		is {{ELEMENT}}TypeProgram -> this.multiHash
		is {{ELEMENT}}TypeFriends -> this.multiHash
		is {{ELEMENT}}TypeIdentity -> this.multiHash
		is {{ELEMENT}}TypeLabel -> this.multiHash 
		is {{ELEMENT}}TypeSmartContract -> this.multiHash
		is {{ELEMENT}}TypeSymbol -> this.multiHash
		is {{ELEMENT}}TypeTag -> this.multiHash 
		is {{ELEMENT}}TypeText -> this.multiHash 
	    }
	if(isTrace(here)) println ("$here: output result '$result'")
	
	exiting(here)
	return result
    }

    fun nameOf (): String {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)
	val mulHas = multiHashOf() 
	val result =
	    when (this) {
<<<<<<< HEAD
		is {{ELEMENT}}TypeBlock -> "{{ELEMENT}}TypeBlock"
=======
		is {{ELEMENT}}TypeSUB01 -> "{{ELEMENT}}TypeSUB01"
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
		is {{ELEMENT}}TypeProgram -> "{{ELEMENT}}TypeProgram"
		is {{ELEMENT}}TypeFriends -> "{{ELEMENT}}TypeFriends"
		is {{ELEMENT}}TypeIdentity -> "{{ELEMENT}}TypeIdentity"
		is {{ELEMENT}}TypeLabel -> "{{ELEMENT}}TypeLabel"
		is {{ELEMENT}}TypeSmartContract -> "{{ELEMENT}}TypeSmartContract"
		is {{ELEMENT}}TypeSymbol -> "{{ELEMENT}}TypeSymbol"
		is {{ELEMENT}}TypeTag -> "{{ELEMENT}}TypeTag"
		is {{ELEMENT}}TypeText -> "{{ELEMENT}}TypeText"
	    }
	if(isTrace(here)) println ("$here: output result '$result'")
	
	exiting(here)
	return result
    }

    fun stringOf (): String {
	val (here, caller) = moduleHereAndCaller()
	entering(here, caller)
	val mulHas = multiHashOf()
	val hash = mulHas.hashOf()
	val result = 
	    when (this) {
<<<<<<< HEAD
		is {{ELEMENT}}TypeBlock -> "{{ELEMENT}}TypeBlock("+hash+")"
=======
		is {{ELEMENT}}TypeSUB01 -> "{{ELEMENT}}TypeSUB01("+hash+")"
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
		is {{ELEMENT}}TypeProgram -> "{{ELEMENT}}TypeProgram("+hash+")"
		is {{ELEMENT}}TypeFriends -> "{{ELEMENT}}TypeFriends("+hash+")"
		is {{ELEMENT}}TypeIdentity -> "{{ELEMENT}}TypeIdentity("+hash+")"
		is {{ELEMENT}}TypeLabel -> "{{ELEMENT}}TypeLabel("+hash+")"
		is {{ELEMENT}}TypeSmartContract -> "{{ELEMENT}}TypeSmartContract("+hash+")"
		is {{ELEMENT}}TypeSymbol -> "{{ELEMENT}}TypeSymbol("+hash+")"
		is {{ELEMENT}}TypeTag -> "{{ELEMENT}}TypeTag("+hash+")"
		is {{ELEMENT}}TypeText -> "{{ELEMENT}}TypeText("+hash+")"
	    }

	if(isTrace(here)) println ("$here: output result '$result'")
	
	exiting(here)
	return result
    }

    companion object {
	fun make(typ: String, mulHas: MultiHashType): {{ELEMENT}}Type {
	    val (here, caller) = moduleHereAndCaller()
	    entering(here, caller)

	    if(isTrace(here)) println ("$here: input typ '$typ'")
	    if(isTrace(here)) println ("$here: input mulHas '$mulHas'")

	    val typLow = typ.toLowerCase()
	    val result =
		when (typLow) {
<<<<<<< HEAD
		    "block" -> {{ELEMENT}}TypeBlock(mulHas)
=======
		    "block" -> {{ELEMENT}}TypeSUB01(mulHas)
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
		    "code" -> {{ELEMENT}}TypeProgram(mulHas)
		    "friends" -> {{ELEMENT}}TypeFriends(mulHas)
		    "identity" -> {{ELEMENT}}TypeIdentity(mulHas)
		    "mabel" -> {{ELEMENT}}TypeLabel(mulHas)
		    "smartContract" -> {{ELEMENT}}TypeSmartContract(mulHas)
		    "symbol" -> {{ELEMENT}}TypeSymbol(mulHas)
		    "tag" -> {{ELEMENT}}TypeTag(mulHas)
		    "text" -> {{ELEMENT}}TypeText(mulHas)
<<<<<<< HEAD
		    else -> { fatalErrorPrint("Type is one of 'Block' 'Code' 'Friends' 'Identity' 'Label' 'SmartContract' 'Symbol' 'Tag' 'Text'", "'$typ'", "Check", here)}
=======
		    else -> { fatalErrorPrint("Type is one of 'SUB01' 'Code' 'Friends' 'Identity' 'Label' 'SmartContract' 'Symbol' 'Tag' 'Text'", "'$typ'", "Check", here)}
>>>>>>> 711622841ee258c69f8a30de57cf54217945111b
	    } // when
	if(isTrace(here)) println ("$here: output result '$result'")
	
	exiting(here)
	return result
	}
    } // companion 
}
